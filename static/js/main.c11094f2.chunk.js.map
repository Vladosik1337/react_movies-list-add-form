{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","imgUrl","title","description","imdbUrl","className","src","alt","href","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","isValid","useState","Math","random","toString","slice","id","touched","setToched","hasError","hasInvalidUrl","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","count","setCount","setNewTitle","setNewDescription","setNewImgUrl","setNewImdbUrl","setNewImdbId","isEmptyField","addMovie","current","validateForm","match","onClick","preventDefault","disabled","App","moviesFromServer","setMovies","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c11094f2.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => {\n  const {\n    imgUrl,\n    title,\n    description,\n    imdbUrl,\n  } = movie;\n\n  return (\n    <div className=\"card\" data-cy=\"movie-card\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            src={imgUrl}\n            alt=\"Film logo\"\n          />\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\">{title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\">\n          {description}\n          <br />\n          <a href={imdbUrl}>IMDB</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n  isValid?: (value: string) => boolean\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n  isValid = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n  const hasInvalidUrl = touched && value && isValid(value);\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {hasInvalidUrl && (\n        <p className=\"help is-danger\">{`${label}  should have a valid URL adress`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [title, setNewTitle] = useState('');\n  const [description, setNewDescription] = useState('');\n  const [imgUrl, setNewImgUrl] = useState('');\n  const [imdbUrl, setNewImdbUrl] = useState('');\n  const [imdbId, setNewImdbId] = useState('');\n\n  const isEmptyField = !title || !imgUrl || !imdbUrl || !imdbId;\n\n  const increaseCount = () => {\n    setCount(current => current + 1);\n  };\n\n  const clearForm = () => {\n    setNewTitle('');\n    setNewDescription('');\n    setNewImgUrl('');\n    setNewImdbUrl('');\n    setNewImdbId('');\n  };\n\n  const addMovie = () => {\n    onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n\n    increaseCount();\n    clearForm();\n  };\n\n  const validateForm = (value: string) => {\n    // eslint-disable-next-line max-len\n    const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n    return !value.match(pattern);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={setNewTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={setNewDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={setNewImgUrl}\n        required\n        isValid={validateForm}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={setNewImdbUrl}\n        required\n        isValid={validateForm}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={setNewImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            onClick={(event) => {\n              event.preventDefault();\n              addMovie();\n            }}\n            disabled={isEmptyField}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState([...moviesFromServer]);\n\n  const onAdd = (movie: Movie) => {\n    setMovies(currentMovies => [\n      ...currentMovies,\n      movie,\n    ]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={onAdd}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}